#version 440

#include "stdheader.glsl"
#include "lightcache.glsl"

layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!

#define MAX_PATHLENGTH 8

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	uint randomSeed = InitRandomSeed(FrameSeed, gridPosition.x + gridPosition.y * BackbufferSize.x);
	vec2 screenCoord = (Random2(randomSeed) + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	vec3 color = vec3(0.0);
	vec3 rayColor = vec3(1.0);

	uint actualNumLightCacheEntries = min(NumLightCacheEntries, LightCacheCapacity);
	float lightSampleWeight = float(actualNumLightCacheEntries) / NUM_SAMPLING_TECHNIQUES;

	// recursive MIS construction.
	float pathProbability = 1.0;
	float anyPathProbabilitySum = 0.0;

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		TraceRay(ray, rayHit, barycentricCoord, triangle);
		if(rayHit == RAY_MAX)
			break;

		// Compute hit normal and texture coordinate.
		vec3 hitNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, hitNormal, hitTexcoord);
		// Get Material infos.
		MaterialTextureData materialTexData = SampleMaterialData(triangle.w, hitTexcoord);

		// Connect to random light samples ("Next Event Estimation")
		Ray lightRay;
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)
		for(int lightSample=0; lightSample<NUM_CAMPATH_LIGHTSAMPLE_CONNECTIONS; ++lightSample)
		{
			uint lightCacheSampleIndex = RandomUInt(randomSeed) % actualNumLightCacheEntries;
		
			lightRay.Direction = LightCacheEntries[lightCacheSampleIndex].Position - ray.Origin;
			float lightDistSq = dot(lightRay.Direction, lightRay.Direction);

			//if(lightDistSq < RAY_HIT_EPSILON * 10.0)
			//	continue;

			float lightDist = sqrt(lightDistSq);
			lightRay.Direction /= lightDist;
			lightRay.Origin = RAY_HIT_EPSILON * lightRay.Direction + ray.Origin;

			if(!TraceRayAnyHit(lightRay, lightDist - RAY_HIT_EPSILON)) // Important to subtract epsilon, since light sample may be slightly behind the surface
			{
				int lightSampleMaterialIndex = LightCacheEntries[lightCacheSampleIndex].MaterialIndex;
				vec3 lightSampleIntensity = LightCacheEntries[lightCacheSampleIndex].Intensity;
				float connectionLightPathToEyePath = 1.0;

				// Triangle material
				if(lightSampleMaterialIndex != -1)
				{
					int lightSampleMaterialIndex = LightCacheEntries[lightCacheSampleIndex].MaterialIndex;
					MaterialTextureData lightSampleMaterialTexData = SampleMaterialData(lightSampleMaterialIndex, LightCacheEntries[lightCacheSampleIndex].Texcoord);

					vec3 lightSampleHitNormal = UnpackNormal(LightCacheEntries[lightCacheSampleIndex].Normal0, LightCacheEntries[lightCacheSampleIndex].Normal1);
					vec3 lightBRDF = BRDF(lightRay.Direction, -LightCacheEntries[lightCacheSampleIndex].IncidentDirection,
											lightSampleMaterialIndex, lightSampleMaterialTexData, lightSampleHitNormal);


					float cosLight = saturate(dot(-lightRay.Direction, lightSampleHitNormal));
					connectionLightPathToEyePath = MIS(GetLuminance(lightBRDF) * cosLight / lightDistSq);

					// I_in = Flux/2PI (= total outgoing light energy) is known.
					// Want to know the Intensity for a given direction I_out				

					// BRDF = L_out/E_in
					// E_in = I_in / dAreaIn
					// L_out = I_out / (dAreaEmitt * cos(OutgoingDir, Normal) * dSolidAngle)
					// dAreaIn = dAreaEmitt
					//
					// => BRDF = I_out / (I_in * cos(OutgoingDir, Normal) * dSolidAngle)
					//
					// Infitesimal angle -> derivation is 1: dSolidAngle = 1
					//
					// => I_out = I_in * BRDF * cos(OutgoingDir, Normal)

					lightSampleIntensity *= lightBRDF * cosLight;
				}

				float cosCamera = saturate(dot(lightRay.Direction, hitNormal));

				vec3 brdf = BRDF(ray.Direction, lightRay.Direction, triangle.w, materialTexData, hitNormal); // Note that this is also 1/samplingProbability!

				float connectionEyePathToLightPath = MIS(GetLuminance(brdf) * cosCamera / lightDistSq);
				float light_pathProbability = LightCacheEntries[lightCacheSampleIndex].PathProbability;
				float light_anyPathProbabilitySum = LightCacheEntries[lightCacheSampleIndex].AnyPathProbabilitySum;

#ifdef RUSSIAN_ROULETTE
				const float connectedPathPropability = 1.0;
#else
				float connectedPathPropability = light_pathProbability * pathProbability + DIVISOR_EPSILON;
#endif
				float mis = connectedPathPropability / 
							(light_pathProbability * connectionEyePathToLightPath * anyPathProbabilitySum + 
							 pathProbability * connectionLightPathToEyePath * light_anyPathProbabilitySum + connectedPathPropability);

				vec3 irradiance = (lightSampleWeight * mis * 
								   cosCamera / lightDistSq) * lightSampleIntensity;
				color += irradiance * rayColor * brdf; 
			}
		}

		float connectionPropability;
		//if(i+1 < MAX_PATHLENGTH) // Not using is faster on GK104 on 18.11.14
		if(!ContinuePath(rayColor, ray, randomSeed, connectionPropability, hitNormal, triangle.w, materialTexData))
			break;

		connectionPropability = MIS(connectionPropability);
		anyPathProbabilitySum = anyPathProbabilitySum * connectionPropability + pathProbability;
		pathProbability *= connectionPropability;
	}

	vec4 final = vec4(color, 1.0);
	final += imageLoad(OutputTexture, gridPosition);
	imageStore(OutputTexture, gridPosition, final);
}