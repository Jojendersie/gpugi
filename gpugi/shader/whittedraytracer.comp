#version 440

#include "stdheader.glsl"

#ifdef SAVE_PIXEL_CACHE
	#include "pixelcache.glsl"
#endif

layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!

#define NUM_LIGHT_SAMPLES 2
#define MAX_PATHLENGTH 8

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	const float lightSampleWeight = float(NumInitialLightSamples) / NUM_LIGHT_SAMPLES; // This could be a uniform!

	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	int gridIndex = gridPosition.x + gridPosition.y * BackbufferSize.x;
	uint randomSeed = InitCoherentRandomSeed(FrameSeed, gridIndex);
	vec2 screenCoord = (Random2(randomSeed) + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	vec3 color = vec3(0.0);
	vec3 pathThroughput = vec3(1.0);
	// If we could have decided for the diffuse case in the last step, then the direct
	// illumination specular part is already contained. This needs to be masked.
	bool lastVertexDiffusePossible = false;
	
#ifdef SAVE_PIXEL_CACHE
	// Not sure if the loop will ever write something to the buffer
	// -> make sure that it has no influence later
	PixelCacheEntries[gridIndex].PathThroughput = vec3(0.0);
#endif

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		TraceRay(ray, rayHit, barycentricCoord, triangle);
		if(rayHit == RAY_MAX)
			break;
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)

		// Compute hit normal and texture coordinate.
		vec3 hitNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, hitNormal, hitTexcoord);
		// Get Material infos.
		MaterialData materialData = SampleMaterialData(triangle.w, hitTexcoord);
		
		// Add self emissivity of hit material.
		//if(!lastVertexDiffusePossible)
		//{
			// TODO: currently light source have black emissivity textures -> not visible in the whitted one.
			//vec3 emissivity = textureLod(sampler2D(Materials[triangle.w].emissivityTexHandle), hitTexcoord, 0.0).xyz;
		//	color += pathThroughput * emissivity;
		//}
//		color += pathThroughput * materialData.Emissivity;

		// Make a decision
		vec3 pdiffuse = GetDiffuseProbability(materialData, abs(dot(hitNormal, ray.Direction)));
		float pdiffuseAvg = GetLuminance(pdiffuse);
		lastVertexDiffusePossible = pdiffuseAvg > 0.0;
		//if(pdiffuseAvg >= Random(seed) && i==0)
		// Sample first to make a decision (next event or iterate)
		vec3 throughput = vec3(1.0);
		float pdf;
		vec3 sampleDirection = SampleBSDF(ray.Direction, materialData, randomSeed, hitNormal, throughput, pdf);
		if(throughput.x == -1.0) // -1 marks the end of the path (diffuse decision) for the Whitted sampler
		{
			// Connect to random light samples ("Next Event Estimation")
		#ifndef SAVE_PIXEL_CACHE
			Ray lightRay;
			for(int lightSample=0; lightSample<NUM_LIGHT_SAMPLES; ++lightSample)
			{
			#ifdef SHOW_SPECIFIC_PATHLENGTH
				if(i+1 != SHOW_SPECIFIC_PATHLENGTH)
					break;
			#endif

				int sampleIndex = int(RandomUInt(randomSeed) % NumInitialLightSamples);
				vec3 radiance = EstimateDirectLight(ray.Origin, hitNormal, sampleIndex, ray.Direction, materialData);
				color += radiance * pathThroughput * (lightSampleWeight / (pdiffuseAvg + DIVISOR_EPSILON));
			}
		#endif
			
		#ifdef SAVE_PIXEL_CACHE
			// Save from where we came and the information for the current hit point
			PixelCacheEntries[gridIndex].PathThroughput = pathThroughput / (pdiffuseAvg + DIVISOR_EPSILON);
			PixelCacheEntries[gridIndex].triangle = triangle;
			PixelCacheEntries[gridIndex].Incident01 = PackNormal(ray.Direction); // TODO is the sign correct?
			PixelCacheEntries[gridIndex].Barycentric0 = barycentricCoord.x;
			PixelCacheEntries[gridIndex].Barycentric1 = barycentricCoord.y;
			PixelCacheEntries[gridIndex].EyePathLength = i + 1;
		#endif
			break;
		}
		// Tracer further
		ray.Direction = sampleDirection;
		ray.Origin += ray.Direction * RAY_HIT_EPSILON;
		// Color shift only
		pathThroughput *= throughput / (GetLuminance(throughput) + DIVISOR_EPSILON);
	}
	
	vec4 final = vec4(color, 1.0);
	final += imageLoad(OutputTexture, gridPosition);
	imageStore(OutputTexture, gridPosition, final);
}