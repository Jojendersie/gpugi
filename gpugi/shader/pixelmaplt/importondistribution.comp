#version 450

#define TRINORMAL_OUTPUT
#define SAMPLING_DECISION_OUTPUT
#include "../stdheader.glsl"
#include "importonmap.glsl"

layout(binding=12) uniform samplerCubeArray EnvironmentMap;


layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!
#ifdef DEPTH_BUFFER_OCCLUSION_TEST
layout(binding = 2, rgba32f) coherent uniform image2D PositionTexture;
#endif


#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	int globalPixelAddress = gridPosition.x + gridPosition.y * BackbufferSize.x;
	uint randomSeed = InitRandomSeed(FrameSeed, globalPixelAddress);
	vec2 screenCoord = (Random2(randomSeed) - 0.5 + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	vec4 color_a = vec4(0.0);
	vec3 pathThroughput = vec3(1.0);

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		vec3 geometryNormal;
		TraceRay(ray, rayHit, barycentricCoord, triangle, geometryNormal);
		if(rayHit == RAY_MAX) {
			//color += pathThroughput * textureLod(EnvironmentMap, vec4(ray.Direction, 0.0), 0.0).xyz;
			break;
		}
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)

		// Compute hit normal and texture coordinate.
		vec3 hitNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, hitNormal, hitTexcoord);
		// Get Material infos.
		MaterialData materialData = SampleMaterialData(triangle.w, hitTexcoord);

	#ifdef DEPTH_BUFFER_OCCLUSION_TEST
		if(i==0) {
			geometryNormal = normalize(geometryNormal);
			vec2 normalPacked = PackNormal(dot(geometryNormal, ray.Direction) > 0.0 ? -geometryNormal : geometryNormal);
			color_a.w = normalPacked.x;//rayHit
			imageStore(PositionTexture, gridPosition, vec4(ray.Origin, normalPacked.y));
		}
	#endif
		// Add self emissivity of hit material.
		color_a.xyz += pathThroughput * materialData.Emissivity;

		vec3 throughput = vec3(1.0);
		float pdf;
		bool isReflectedDiffuse;
		vec3 newDirection = SampleBSDF(ray.Direction, materialData, randomSeed, hitNormal, throughput, isReflectedDiffuse, pdf);
		float cosThetaAbs = saturate(abs(dot(hitNormal, ray.Direction)));
		vec3 pDiffuse = GetDiffuseProbability(materialData, cosThetaAbs);
		
		if(isReflectedDiffuse)
		{
			if(i > 0)
			{
				pathThroughput *= pDiffuse / max(Avg(pDiffuse), DIVISOR_EPSILON);
				//pathThroughput *= throughput;
	//			pathThroughput *= GetDiffuseReflectance(materialData, cosThetaAbs) / PI;
	
				// Pack importon data
				ivec3 throughputPacked_directionPacked = ivec3(
					floatBitsToInt(PackHDR64(pathThroughput)),
					int(PackNormal32(ray.Direction))
				);
				ivec4 position_pixel = ivec4(floatBitsToInt(ray.Origin),
					gridPosition.x + (gridPosition.y << 16));

				// Write importon map entry and terminate.
			#ifdef USE_STOCHASTIC_HASHMAP
				uint hmDataIndex = insertToHashGrid(ray.Origin, randomSeed);
				if(hmDataIndex != ~0)
				{
					tryWriteLocked(hmDataIndex, throughputPacked_directionPacked, position_pixel);
				}
			#else
				uint hmDataIndex = globalPixelAddress * 2;
				HashMapData[hmDataIndex].yzw = throughputPacked_directionPacked;
				HashMapData[hmDataIndex + 1] = position_pixel;
				insertToHashGrid(ray.Origin, int(hmDataIndex));
			#endif
			}
	
			break;
		}
		
		//color = GetDiffuseProbability(materialData, cosThetaAbs);
		//color  =materialData.Reflectiveness.xyz;
		//throughput /= max(1.0 - Avg(pDiffuse), DIVISOR_EPSILON);
		//throughput /= max(pDiffuse, DIVISOR_EPSILON);
		
		// Continue path
		ray.Direction = newDirection;
		ray.Origin += ray.Direction * RAY_HIT_EPSILON;
		pathThroughput *= throughput;
		
	#ifdef RUSSIAN_ROULETTE
		float continuationPropability = saturate(GetLuminance(throughput) + 0.02);
		if(Random(randomSeed) >= continuationPropability) // if continuationPropability is zero, path should be stoped -> >=
			break;
		pathThroughput /= continuationPropability; // Only change in spectrum, no energy loss.
	#endif
	}

	vec4 final = color_a;
	final.xyz += imageLoad(OutputTexture, gridPosition).xyz;
	final.w = color_a.w;
	imageStore(OutputTexture, gridPosition, final);
}
