#version 450

#define TRINORMAL_OUTPUT
#define SAMPLING_DECISION_OUTPUT
#include "../stdheader.glsl"
#include "importonmap.glsl"

layout(binding=12) uniform samplerCubeArray EnvironmentMap;


layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!
#ifdef DEPTH_BUFFER_OCCLUSION_TEST
layout(binding = 2, rgba32f) coherent uniform image2D PositionTexture;
#endif

#define EXCLUDE_DIRECT_VISIBLE

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	int globalPixelAddress = gridPosition.x + gridPosition.y * BackbufferSize.x;
	uint randomSeed = InitRandomSeed(FrameSeed, globalPixelAddress);
	vec2 screenCoord = (Random2(randomSeed) - 0.5 + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	vec4 color_a = vec4(0.0);
	vec3 pathThroughput = vec3(1.0);
	bool specularPath = true;

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		vec3 geometryNormal;
		TraceRay(ray, rayHit, barycentricCoord, triangle, geometryNormal);
		if(rayHit == RAY_MAX) {
			//color += pathThroughput * textureLod(EnvironmentMap, vec4(ray.Direction, 0.0), 0.0).xyz;
			break;
		}
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)

		// Compute hit normal and texture coordinate.
		vec3 hitNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, hitNormal, hitTexcoord);
		// Get Material infos.
		MaterialData materialData = SampleMaterialData(triangle.w, hitTexcoord);

	#ifdef DEPTH_BUFFER_OCCLUSION_TEST
		if(i==0) {
			geometryNormal = normalize(geometryNormal);
			vec2 normalPacked = PackNormal(dot(geometryNormal, ray.Direction) > 0.0 ? -geometryNormal : geometryNormal);
			color_a.w = normalPacked.x;
			imageStore(PositionTexture, gridPosition, vec4(ray.Origin, normalPacked.y));
		}
	#endif
	//#ifndef EXCLUDE_DIRECT_VISIBLE
		// Add self emissivity of hit material.
		if(specularPath)
			color_a.xyz += pathThroughput * materialData.Emissivity;
	//#endif

		//if(i+1 < MAX_PATHLENGTH) // Not using is faster on GK104 on 18.11.14
		vec3 throughput = vec3(1.0);
		float pdf;
		bool isReflectedDiffuse;
		vec3 newDirection = SampleBSDF(ray.Direction, materialData, randomSeed, hitNormal, throughput, isReflectedDiffuse, pdf);
		
		float cosThetaAbs = saturate(abs(dot(hitNormal, ray.Direction)));
		if(isReflectedDiffuse)
		{
		#ifdef EXCLUDE_DIRECT_VISIBLE
			if(i>0) {
		#endif
			pathThroughput /= AvgProbability(GetDiffuseProbability(materialData, cosThetaAbs));
//			pathThroughput *= GetDiffuseReflectance(materialData, cosThetaAbs) / PI;
			// Write importon map entry and terminate.
			uint hmDataIndex = globalPixelAddress * 3;
			HashMapData[hmDataIndex].yzw = floatBitsToInt(pathThroughput);
			HashMapData[hmDataIndex + 1].xyz = floatBitsToInt(ray.Origin);
			HashMapData[hmDataIndex + 2].xyz = floatBitsToInt(ray.Direction);
			//HashMapData[hmDataIndex + 2].w = int(PackNormal32(ray.Direction));
			HashMapData[hmDataIndex + 1].w = gridPosition.x + (gridPosition.y << 16);
		#ifdef USE_STOCHASTIC_HASHMAP
			insertToHashGrid(ray.Origin, int(hmDataIndex), randomSeed);
		#else
			insertToHashGrid(ray.Origin, int(hmDataIndex));
		#endif
		#ifdef EXCLUDE_DIRECT_VISIBLE
			}
		#endif
	
			break;
		}
		
		//color = GetDiffuseProbability(materialData, cosThetaAbs);
		//color  =materialData.Reflectiveness.xyz;
	//	throughput /= 1.0 - Avg(GetDiffuseProbability(materialData, cosThetaAbs));
		//throughput /= AvgProbability(GetDiffuseProbability(materialData, cosThetaAbs));
		
		// Continue path
		ray.Direction = newDirection;
		ray.Origin += ray.Direction * RAY_HIT_EPSILON;
		pathThroughput *= throughput;
		specularPath = specularPath && !isReflectedDiffuse;
		
	#ifdef RUSSIAN_ROULETTE
		float continuationPropability = saturate(GetLuminance(throughput));
		if(Random(randomSeed) >= continuationPropability) // if continuationPropability is zero, path should be stoped -> >=
			break;
		pathThroughput /= continuationPropability; // Only change in spectrum, no energy loss.
	#endif
	}

	vec4 final = color_a;
	final.xyz += imageLoad(OutputTexture, gridPosition).xyz;
	final.w = color_a.w;
	imageStore(OutputTexture, gridPosition, final);
}
