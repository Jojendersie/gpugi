#version 440

#include "stdheader.glsl"

// coherent is necessary!
layout(binding = 0, rgba32f) coherent uniform image2D OutputTexture;
layout(binding = 1, r32ui) coherent uniform uimage2D LockTexture;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	vec4 lightSamplePos_Norm0 = texelFetch(InitialLightSampleBuffer, int(gl_GlobalInvocationID.x) * 2);
	vec4 lightIntensity_Norm1 = texelFetch(InitialLightSampleBuffer, int(gl_GlobalInvocationID.x) * 2 + 1);

	// Try to connect to camera. For explainations see lighttracer.comp
	Ray cameraRay;
	cameraRay.Direction = CameraPosition - lightSamplePos_Norm0.xyz;
	float camViewDotRay = -dot(CameraW, cameraRay.Direction);
	if(camViewDotRay > 0.0) // Camera faces point?
	{
		// Compute screen coord for this ray.
		vec3 proj = vec3(-dot(CameraU, cameraRay.Direction), -dot(CameraV, cameraRay.Direction), camViewDotRay);
		vec2 screenCoord = proj.xy / proj.z;
		screenCoord.x /= dot(CameraU,CameraU);
		screenCoord.y /= dot(CameraV,CameraV);

		// Valid screencoors
		if(screenCoord.x >= -1.0 && screenCoord.x < 1.0 && screenCoord.y > -1.0 && screenCoord.y <= 1.0)
		{
			float cameraDistSq = dot(cameraRay.Direction, cameraRay.Direction);
			float cameraDist = sqrt(cameraDistSq);
			cameraRay.Direction /= cameraDist;
			cameraRay.Origin = cameraRay.Direction * RAY_HIT_EPSILON + lightSamplePos_Norm0.xyz;

			// Hits *pinhole* camera
			if(!TraceRayAnyHit(cameraRay, cameraDist))
			{
				vec3 normal = UnpackNormal(vec2(lightSamplePos_Norm0.w, lightIntensity_Norm1.w));
				float cosTheta = dot(normal, cameraRay.Direction);
				float cosAtCamera = saturate(camViewDotRay / cameraDist); // = dot(-cameraRay.Direction, CameraW);
				float intensityToRadiance = cosTheta / (PI_2 * cosAtCamera * cosAtCamera * cosAtCamera * PixelArea * cameraDistSq);
				vec3 color = lightIntensity_Norm1.xyz * intensityToRadiance;

				// Add Sample.
				ivec2 pixelCoord = ivec2((screenCoord*0.5 + vec2(0.5)) * BackbufferSize);

		//		bool hasWritten = false; // Do not use "break;" instead. There's a bug in the GLSL optimizer!
		//		do {
		//			if(imageAtomicCompSwap(LockTexture, pixelCoord, uint(0), uint(1)) == 0)
		//			{
		//				memoryBarrierImage();

						// Add sample
						vec4 imageVal = imageLoad(OutputTexture, pixelCoord);
						imageStore(OutputTexture, pixelCoord, vec4(imageVal.xyz + color, imageVal.w));
							
						// Release Lock
		//				imageAtomicExchange(LockTexture, pixelCoord, 0);
		//				hasWritten = true;
		//			}
		//		} while(!hasWritten);
			}
		}
	}
}