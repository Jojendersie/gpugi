#version 450

#define HIT_INDEX_OUTPUT
#define TRACERAY_IMPORTANCE_BREAK
#define SAMPLING_DECISION_OUTPUT
#include "../stdheader.glsl"

layout(binding=7) uniform samplerBuffer SGGXBuffer;
layout(binding=8) uniform samplerBuffer HierarchyMaterialBuffer;
layout(binding=12) uniform samplerCubeArray EnvironmentMap;
#include "sggx.glsl"

layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!

#define NUM_LIGHT_SAMPLES 1
#define MAX_PATHLENGTH 4

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	const float lightSampleWeight = float(NumInitialLightSamples) / NUM_LIGHT_SAMPLES; // This could be a uniform!

	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	uint randomSeed = InitRandomSeed(FrameSeed, gridPosition.x + gridPosition.y * BackbufferSize.x);
	vec2 screenCoord = (Random2(randomSeed) + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	vec3 color = vec3(0.0);
	vec3 pathThroughput = vec3(1.0);
	float pathImportanceThreshold = 1.0;
	bool didNextEventEstimation = false;
	ivec2 hitMask = ivec2(0xFFFFFFFF);

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		float importance, nodeSizeSq;
		TraceRay(ray, rayHit, pathImportanceThreshold, importance, nodeSizeSq, hitMask, barycentricCoord, triangle);
		if(rayHit == RAY_MAX) {
			color += pathThroughput * textureLod(EnvironmentMap, vec4(ray.Direction, 0.0), 0.0).xyz;
			break;
		}
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon because of masking!)

		// Get Material infos and normal either from node or from triangle hit point.
		vec3 hitNormal;
		MaterialData materialData;
		if(hitMask.y == 0xFFFFFFFF)
		{
			// Unpack material from hierarchy buffer
			materialData.Reflectiveness = texelFetch(HierarchyMaterialBuffer, hitMask.x * 6);
			materialData.Opacity = texelFetch(HierarchyMaterialBuffer, hitMask.x * 6 + 1).xyz;
			materialData.Diffuse = texelFetch(HierarchyMaterialBuffer, hitMask.x * 6 + 2).xyz;
			materialData.Emissivity = texelFetch(HierarchyMaterialBuffer, hitMask.x * 6 + 3).xyz;
			vec4 tmp = texelFetch(HierarchyMaterialBuffer, hitMask.x * 6 + 4);
			materialData.Fresnel0 = tmp.xyz;
			materialData.RefractionIndexAvg = tmp.w;
			materialData.Fresnel1 = texelFetch(HierarchyMaterialBuffer, hitMask.x * 6 + 5).xyz;
			// Load and unpack the symmetric SGGX matrix
			mat3x3 sggx = loadSGGX(hitMask.x * 3);
			hitNormal = sampleNormal(ray.Direction, sggx, randomSeed);
		//	epsilon = length(texelFetch(HierachyBuffer, hitMask.x * 2).xyz -
		//					 texelFetch(HierachyBuffer, hitMask.x * 2 + 1).xyz);
			/*color = (sqrt(HierarchyImportance[hitMask.x]) / 5).xxx;
			vec4 final = vec4(color, 1.0);
			final += imageLoad(OutputTexture, gridPosition);
			imageStore(OutputTexture, gridPosition, final);
			return;*/
		} else {
			// Compute normal and texture coordinate from barycentric coordinates
			vec2 hitTexcoord;
			GetTriangleHitInfo(triangle, barycentricCoord, hitNormal, hitTexcoord);
			// Sample material
			materialData = SampleMaterialData(triangle.w, hitTexcoord);
		}
		
		float nextPathImportanceThreshold = pathImportanceThreshold * 8.0;
		float epsilon = RAY_HIT_EPSILON;
		// Skip out of the node if we would only get a self intersection
		if(nextPathImportanceThreshold >= importance)
		{
			epsilon = sqrt(nodeSizeSq);
		//	epsilon = length(texelFetch(HierachyBuffer, hitMask.x * 2).xyz -
		//					 texelFetch(HierachyBuffer, hitMask.x * 2 + 1).xyz);
		}


		// Add self emissivity of hit material.
		// To avoid double counting use either next event estimation or this sampling. In general,
		// next event estimation performs better, but for specular bounces or direct view sampling
		// is more probable to find the correct light.
		if( !didNextEventEstimation )
			color += pathThroughput * materialData.Emissivity;
		
		// Connect to random light samples ("Next Event Estimation")
		didNextEventEstimation = materialData.Reflectiveness.w < 500.0;
		if( didNextEventEstimation )
		{
			Ray lightRay;
			for(int lightSample=0; lightSample<NUM_LIGHT_SAMPLES; ++lightSample)
			{
			#ifdef SHOW_SPECIFIC_PATHLENGTH
				if(i+1 != SHOW_SPECIFIC_PATHLENGTH)
					break;
			#endif

				int sampleIndex = int(RandomUInt(randomSeed) % NumInitialLightSamples);
				vec3 radiance = EstimateDirectLight(ray.Origin, hitNormal, sampleIndex, ray.Direction, materialData, pathImportanceThreshold);
				color += radiance * pathThroughput * lightSampleWeight;
			}
		}

		//if(i+1 < MAX_PATHLENGTH) // Not using is faster on GK104 on 18.11.14
		vec3 throughput = vec3(1.0);
		bool isReflectedDiffuse;
		ray.Direction = SampleAdjointBSDF(ray.Direction, materialData, randomSeed, hitNormal, throughput, isReflectedDiffuse);
		ray.Origin = ray.Origin + ray.Direction * epsilon;
		pathThroughput *= throughput;
		pathImportanceThreshold = nextPathImportanceThreshold;
		/*if(isReflectedDiffuse)
			pathImportanceThreshold *= 10.0;
		else
			pathImportanceThreshold *= 10.0 / (1.0 + log2(materialData.Reflectiveness.w + 1.0));*/
	#ifdef RUSSIAN_ROULETTE
		float continuationPropability = saturate(GetLuminance(throughput));
		if(Random(randomSeed) >= continuationPropability) // if continuationPropability is zero, path should be stoped -> >=
			break;
		pathThroughput /= continuationPropability; // Only change in spectrum, no energy loss.
	#endif
	}

	vec4 final = vec4(color, 1.0);
	final += imageLoad(OutputTexture, gridPosition);
	imageStore(OutputTexture, gridPosition, final);
}