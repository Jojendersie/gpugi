#version 450

#define TRIINDEX_OUTPUT
#include "../stdheader.glsl"
#include "importanceubo.glsl"

layout(binding = 10, std430) restrict buffer HierarchyImportanceBuffer
{
	float HierarchyImportance[];
};

// Value used to notify parent nodes that child is done with gathering importance.
const float NotificationBias = 1.19e-07; // Float machine epsilon

// Should be called once per inner node.
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	// If there is no inner node for this thread, return. (May happen due to block sizing)
	if(gl_GlobalInvocationID.x >= NumInnerNodes)
		return;

	// Get node info (see also "../traceray.glsl")
	uint childCodeRaw = floatBitsToUint(texelFetch(HierachyBuffer, int(gl_GlobalInvocationID.x) * 2).w); 	
	int childNodeIndex = int(childCodeRaw & uint(0x7FFFFFFF));	// Most significant bit tells us is this is a leaf.
	bool isChildLeaf = childNodeIndex != childCodeRaw;

	float totalImportance = 0.0;

	// If child is a leaf, gather all triangle importance values.
	if(isChildLeaf)
	{	
		int currentTriangleIndex = int(TRIANGLES_PER_LEAF * childNodeIndex);
		for(int i=0; i<TRIANGLES_PER_LEAF; ++i, ++currentTriangleIndex)
		{
			totalImportance += HierarchyImportance[NumInnerNodes + currentTriangleIndex];
		}
		HierarchyImportance[gl_GlobalInvocationID.x] = totalImportance / IterationCount + NotificationBias;
	}
	else
	{
	 	// Set own importance to zero.	
		HierarchyImportance[gl_GlobalInvocationID.x] = 0.0;
	}
}