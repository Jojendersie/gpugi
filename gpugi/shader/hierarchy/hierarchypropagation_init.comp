#version 450

#include "../stdheader.glsl"
#include "importanceubo.glsl"

layout(binding = 6, std430) restrict buffer HierarchyImportanceBuffer
{
	vec2 HierarchyImportance[];
};
layout(binding = 10, std430) restrict buffer SubtreeImportanceBuffer
{
	float SubtreeImportance[];
};

layout(binding = 11) uniform samplerBuffer ParentPointerBuffer;

// Value used to notify parent nodes that child is done with gathering importance.
const float NotificationBias = 1.19e-07; // Float machine epsilon

// Should be called once per inner node.
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	// If there is no inner node for this thread, return. (May happen due to block sizing)
	if(gl_GlobalInvocationID.x >= NumInnerNodes)
		return;

	// Get node info (see also "../traceray.glsl")
	uint childCodeRaw = floatBitsToUint(texelFetch(HierachyBuffer, int(gl_GlobalInvocationID.x) * HierarchyBufferStride).w);
	int childNodeIndex = int(childCodeRaw & uint(0x7FFFFFFF));	// Most significant bit tells us is this is a leaf.
	bool isChildLeaf = childNodeIndex != childCodeRaw;

	//float totalImportance = HierarchyImportance[gl_GlobalInvocationID.x];
	HierarchyImportance[gl_GlobalInvocationID.x].x /= NumImportanceIterations;
	HierarchyImportance[gl_GlobalInvocationID.x].y = 0.0;
	float childrenImportance = 0.0;

	// Sum up importance values of the children (triangles).
	if(isChildLeaf)
	{
		int currentTriangleIndex = int(TRIANGLES_PER_LEAF * childNodeIndex);
		for(int i=0; i<TRIANGLES_PER_LEAF; ++i, ++currentTriangleIndex)
		{
			childrenImportance += HierarchyImportance[NumInnerNodes + currentTriangleIndex].x;
		}

		// Amplify the importance by the ratio of children and own importance.
		// This is the hit-probability-difference between the nodes. The higher the difference the
		// more important is to check the children themselves.
		// Normalize (each individual importance value should have been divided by the number
		// of iterations, which is equivalent to doing it once in the end).
		childrenImportance /= NumImportanceIterations;
		SubtreeImportance[gl_GlobalInvocationID.x] = max(childrenImportance, NotificationBias);
		//HierarchyImportance[gl_GlobalInvocationID.x].y = 1.0;
		float approximation = HierarchyImportance[gl_GlobalInvocationID.x].x / childrenImportance;
#ifdef AABOX_BVH
		vec4 hierarchy1 = texelFetch(HierachyBuffer, int(gl_GlobalInvocationID.x) * HierarchyBufferStride + 1);
		// hierarchy0.xyz and hierarchy1.xyz are bbmin and bbmax
		vec3 sides = hierarchy1.xyz - hierarchy0.xyz;
		float avgArea = (sides.x * sides.y + sides.x * sides.z + sides.y * sides.z) * 2.0 / 6.0;
#elif defined(OBOX_BVH)
		vec4 hierarchy1 = texelFetch(HierachyBuffer, int(gl_GlobalInvocationID.x) * HierarchyBufferStride + 1);
		// hierarchy1.xyz are the side length halfed -> x*y*4 = one side in xy
		// -> *8 for the two opposite sides.
		float avgArea = (hierarchy1.x * hierarchy1.y + hierarchy1.x * hierarchy1.z + hierarchy1.y * hierarchy1.z) * 8.0 / 6.0;
#endif
		HierarchyImportance[gl_GlobalInvocationID.x].y = approximation * approximation * avgArea;
		// TODO: assert that approximation is >= 1
	}
}
