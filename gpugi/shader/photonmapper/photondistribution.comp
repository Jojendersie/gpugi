#version 440

// TODO: is this required?
#define TRINORMAL_OUTPUT

#define SAMPLING_DECISION_OUTPUT
#include "../stdheader.glsl"

#include "photonmap.glsl"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint randomSeed = InitRandomSeed(FrameSeed, gl_GlobalInvocationID.x);
	int lightSampleIndex = int(gl_GlobalInvocationID.x / NumPhotonsPerLightSample);
	vec4 lightSamplePos_Norm0 = texelFetch(InitialLightSampleBuffer, lightSampleIndex * 2);
	vec4 lightIntensity_Norm1 = texelFetch(InitialLightSampleBuffer, lightSampleIndex * 2 + 1);

	// Keep in mind that we are tracing flux = photons!
	// TotalFlux = Integral(I0 * cos Angle) dangle = I0 * PI
	vec3 pathThroughput = lightIntensity_Norm1.xyz * (PI / NumPhotonsPerLightSample);

	Ray ray;
	ray.Origin = lightSamplePos_Norm0.xyz;
	// Omnidirectional light?
	if(lightIntensity_Norm1.w > 1.0)
	{
		ray.Direction = SampleDirection(Random2(randomSeed));
		pathThroughput *= 4.0; // The above integration is for Lambertian emitters, need to correct this
	} else {
		vec3 normal = UnpackNormal(vec2(lightSamplePos_Norm0.w, lightIntensity_Norm1.w));
		vec3 U, V;
		CreateONB(normal, U, V);
		ray.Direction = SampleHemisphereCosine(Random2(randomSeed), U, V, normal);
	}

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		vec3 geometryNormal;
		TraceRay(ray, rayHit, barycentricCoord, triangle, geometryNormal);
		if(rayHit == RAY_MAX)
			break;
		//geometryNormal = normalize(geometryNormal); geometryNormal is not normalize, but it actually does not need to be! See AdjointBSDFShadingNormalX functions
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)

		// Compute hit normal and texture coordinate.
		vec3 shadingNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, shadingNormal, hitTexcoord);

		// Get Material infos.
		MaterialData materialData = SampleMaterialData(triangle.w, hitTexcoord);

		// Sample next ray. Store the photon if hit is diffuse and continue otherwise.
		vec3 throughput = vec3(1.0);
		float samplePDF;
		bool isReflectedDiffuse;
		vec3 newDirection = SampleAdjointBSDF(ray.Direction, materialData, randomSeed, shadingNormal, throughput, isReflectedDiffuse, samplePDF);

		if(isReflectedDiffuse)
		{
			// Path length debugging.
		#ifdef SHOW_SPECIFIC_PATHLENGTH
			if(i+1 == SHOW_SPECIFIC_PATHLENGTH)
			{
		#endif
		
			// Store flux, position and incident direction per photon.
			ivec3 hmDatThroughput = floatBitsToInt(pathThroughput);
			ivec4 hmDatPosition_directionPacked = ivec4(floatBitsToInt(ray.Origin),
				int(PackNormal32(ray.Direction)));
				
		#ifdef USE_STOCHASTIC_HASHMAP
			uint hmDataIndex = insertToHashGrid(ray.Origin, randomSeed);
			if(hmDataIndex != ~0)
			{
				tryWriteLocked(hmDataIndex, hmDatThroughput, hmDatPosition_directionPacked);
			}
		#else
			uint hmDataIndex = atomicAdd(HashMapCounter, 1) * 2;
			HashMapData[hmDataIndex].yzw = hmDatThroughput;
			HashMapData[hmDataIndex + 1] = hmDatPosition_directionPacked;
			insertToHashGrid(ray.Origin, int(hmDataIndex));
		#endif

		#ifdef SHOW_SPECIFIC_PATHLENGTH
			}
		#endif
		}
		// Continue ray.
		throughput *= AdjointBSDFShadingNormalCorrection(ray.Direction, newDirection, geometryNormal, shadingNormal);
		pathThroughput *= throughput;
		
	#ifdef RUSSIAN_ROULETTE
		float continuationPropability = saturate(GetLuminance(throughput));
		if(Random(randomSeed) >= continuationPropability) // if terminationPropability is zero, path should be stoped -> >=
			break;
		pathThroughput /= continuationPropability; // Only change in spectrum, no energy loss. Photon (!) stays the same.
	#endif
	
		ray.Direction = newDirection;
		ray.Origin += ray.Direction * RAY_HIT_EPSILON;
	}
}
