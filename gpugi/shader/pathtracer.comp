#version 450

#include "scenedata.glsl"
#include "intersectiontests.glsl"
#include "random.glsl"
#include "helper.glsl"
#include "materials.glsl"
#include "globaluniforms.glsl"


#define MAX_NUM_BOUNCES 16
#define RAY_HIT_EPSILON 0.01
#define RAY_MAX 3.40282347e+38
#define RUSSIAN_ROULETTE

layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!


// Debug variables for traceray.
/*#define TRACERAY_DEBUG_VARS
uint numBoxesVisited = 0;
uint numTrianglesVisited = 0;*/

// Two versions of trace ray.
#include "pathtracer_traceray.glsl"
#define ANY_HIT
#include "pathtracer_traceray.glsl"
#undef ANY_HIT


#define LOCAL_SIZE 16
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	uint randomSeed = InitRandomSeed(FrameSeed, gridPosition.x + gridPosition.y * BackbufferSize.x);
	vec2 screenCoord = (Random2(randomSeed) + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	vec3 color = vec3(0.0);
	vec3 rayColor = vec3(1.0);

	for(int i=0; i<MAX_NUM_BOUNCES; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		TraceRay(ray, rayHit, barycentricCoord, triangle);
		if(rayHit == RAY_MAX)
			break;

		// Compute hit normal.
		vec3 vnormal0 = vec3(texelFetch(VertexBuffer, triangle.x * 2).w, texelFetch(VertexBuffer, triangle.x * 2 + 1).xy);
		vec3 vnormal1 = vec3(texelFetch(VertexBuffer, triangle.y * 2).w, texelFetch(VertexBuffer, triangle.y * 2 + 1).xy);
		vec3 vnormal2 = vec3(texelFetch(VertexBuffer, triangle.z * 2).w, texelFetch(VertexBuffer, triangle.z * 2 + 1).xy);
		vec3 hitNormal = normalize(vnormal0 * barycentricCoord.x + 
						 		   vnormal1 * barycentricCoord.y +
								   vnormal2 * barycentricCoord.z);

	/*	vec3 hitNormal = normalize(GetVec(Vertices[triangle.x].Normal) * barycentricCoord.x + 
						 		   GetVec(Vertices[triangle.y].Normal) * barycentricCoord.y +
								   GetVec(Vertices[triangle.z].Normal) * barycentricCoord.z); */

		// Compute hit color.
		vec3 hitColor = vec3(Random(randomSeed)); // TODO
#ifdef RUSSIAN_ROULETTE
		float hitLuminance = GetLuminance(hitColor);
		if(Random(randomSeed) > hitLuminance)
			break;
		rayColor *= hitColor / hitLuminance; // Only change in spectrum, no energy loss.
#else
		rayColor *= hitColor; // Absorption, not via Russion Roulette, but by color multiplication.
#endif


		// Add direct light - FIXED POINT LIGHT ATM
		const vec3 lightPos = vec3(0, 2, 0);
		ray.Origin = ray.Origin + (rayHit - RAY_HIT_EPSILON) * ray.Direction;
		ray.Direction = lightPos - ray.Origin;

		float lightDist = length(ray.Direction);
		ray.Direction /= lightDist;
		rayHit = lightDist;

		if(!TraceRayAnyHit(ray, rayHit))
			color += rayColor * saturate(dot(ray.Direction, hitNormal)); // 1/PI is BRDF, rayColor incoming L

		// Bounce ray.
		vec3 U, V;
		CreateONB(hitNormal, U, V);
		ray.Direction = SampleUnitHemisphere(Random2(randomSeed), U, V, hitNormal);
	}

	vec4 final = vec4(color, 1.0);
	//vec4 final = vec4(vec3(float(numBoxesVisited) * 0.001), 1.0);
	final += imageLoad(OutputTexture, gridPosition);
	imageStore(OutputTexture, gridPosition, final);
	//FragColor = vec4(color, 1.0); //vec4(vec3(float(numBoxesVisited) * 0.001), 1.0);
}