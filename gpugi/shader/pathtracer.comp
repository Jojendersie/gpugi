#version 450

#define TRINORMAL_OUTPUT
#include "stdheader.glsl"

layout(binding=12) uniform samplerCubeArray EnvironmentMap;

//#define RECONSTRUCTION_FILTER 3 // BSpline reconstruction filter

layout(binding = 0, rgba32f) restrict uniform image2D OutputTexture; // attention! No coherent flag set!

#define NUM_LIGHT_SAMPLES 1

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	const float lightSampleWeight = float(NumInitialLightSamples) / NUM_LIGHT_SAMPLES; // This could be a uniform!

	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	uint randomSeed = InitRandomSeed(FrameSeed, gridPosition.x + gridPosition.y * BackbufferSize.x);

	vec3 color = vec3(0.0);
	vec3 pathThroughput = vec3(1.0);
	bool didNextEventEstimation = false;
	
#ifdef RECONSTRUCTION_FILTER
	// TODO: importance sample filter?
	vec2 rval = Random2(randomSeed);
	rval.x *= PI * 2.0;
	rval.y = sqrt(rval.y) * 2.0;
	vec2 subPixelPos = rval.y * vec2(sin(rval.x), cos(rval.x));
	if(rval.y < 1.0)
		pathThroughput = vec3( (3.0 * rval.y*rval.y*rval.y - 6.0 * rval.y*rval.y + 4.0) / 6.0 );
	else
		pathThroughput = vec3( (-rval.y*rval.y*rval.y + 6.0 * rval.y*rval.y - 12.0 * rval.y + 8.0) / 6.0 );
	pathThroughput *= PI * 4.0; // currently pdf = 1 / pi r^2
#else
	vec2 subPixelPos = Random2(randomSeed) - 0.5;
#endif

	vec2 screenCoord = (subPixelPos + gridPosition) / BackbufferSize * 2.0 - 1.0; // Random2 gives [0,1[. Adding [0, BackbufferSize[ should result in [0, BackbufferSize]

	Ray ray;
	ray.Origin = CameraPosition;
	ray.Direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		vec3 geometryNormal;
		TraceRay(ray, rayHit, barycentricCoord, triangle, geometryNormal);
		if(rayHit == RAY_MAX) {
			color += pathThroughput * textureLod(EnvironmentMap, vec4(ray.Direction, 0.0), 0.0).xyz;
			break;
		}
		geometryNormal = normalize(geometryNormal);
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)

		// Compute hit normal and texture coordinate.
		vec3 hitNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, hitNormal, hitTexcoord);
		//hitNormal = geometryNormal;
		// Get Material infos.
		MaterialData materialData = SampleMaterialData(triangle.w, hitTexcoord);

		// Add self emissivity of hit material.
		// To avoid double counting use either next event estimation or this sampling. In general,
		// next event estimation performs better, but for specular bounces or direct view sampling
		// is more probable to find the correct light.
	#ifdef SHOW_SPECIFIC_PATHLENGTH
		if(i == SHOW_SPECIFIC_PATHLENGTH)
	#endif
		if( !didNextEventEstimation )
			color += pathThroughput * materialData.Emissivity;

		// Connect to random light samples ("Next Event Estimation")
		didNextEventEstimation = materialData.Reflectiveness.w < 500.0;
		Ray lightRay;
	#ifdef SHOW_SPECIFIC_PATHLENGTH
		if(i+1 == SHOW_SPECIFIC_PATHLENGTH)
	#endif
		for(int lightSample=0; lightSample<NUM_LIGHT_SAMPLES; ++lightSample)
		{
			int sampleIndex = int(RandomUInt(randomSeed) % NumInitialLightSamples);
			vec3 radiance = EstimateDirectLight(ray.Origin, hitNormal, sampleIndex, ray.Direction, materialData, didNextEventEstimation);
			color += radiance * pathThroughput * lightSampleWeight;
		}

		//if(i+1 < MAX_PATHLENGTH) // Not using is faster on GK104 on 18.11.14
		vec3 throughput = vec3(1.0);
		float pdf;
		ray.Direction = SampleBSDF(ray.Direction, materialData, randomSeed, hitNormal, throughput, pdf);
		ray.Origin += ray.Direction * RAY_HIT_EPSILON;
		pathThroughput *= throughput;
	#ifdef RUSSIAN_ROULETTE
		float continuationPropability = saturate(GetLuminance(throughput));
		if(Random(randomSeed) >= continuationPropability) // if continuationPropability is zero, path should be stopped -> >=
			break;
		pathThroughput /= continuationPropability; // Only change in spectrum, no energy loss.
	#endif
	}

	vec4 final = vec4(color, 0.0);
	final += imageLoad(OutputTexture, gridPosition);
	imageStore(OutputTexture, gridPosition, final);
}
