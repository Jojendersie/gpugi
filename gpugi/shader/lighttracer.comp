#version 440

#define TRINORMAL_OUTPUT
#define SAMPLING_DECISION_OUTPUT
#include "stdheader.glsl"

#ifdef SAVE_LIGHT_CACHE
	#include "bidirpathtracer/lightcache.glsl"
#else
    layout(binding = 4, std140) uniform LightPathTrace
    {
        int NumRaysPerLightSample;
    };
#endif

#ifdef CHAINED_MIS
	#include "bidirpathtracer/chained_mis.glsl"
#endif

#include "screenreproject.glsl"

#if defined(SAVE_LIGHT_CACHE)
void saveLightCache(uint lightCacheEntryIndex,
	vec3 pathThroughput,
	int materialIndex,
	vec3 position,
	vec2 packedShadingNormal,
	vec2 hitTexcoord,
	vec3 incidentDirection,
	int pathLength)
{
	if(lightCacheEntryIndex < LightCacheCapacity)
	{
		LightCacheEntries[lightCacheEntryIndex].Flux = pathThroughput;
		LightCacheEntries[lightCacheEntryIndex].MaterialIndex = materialIndex;
		// Use "true" position - necessary epsilon can be easily applied in pathtracer_bidir.comp
		LightCacheEntries[lightCacheEntryIndex].Position = position;
	//	vec2 packedNormal = PackNormal(shadingNormal);
		LightCacheEntries[lightCacheEntryIndex].Normal0 = packedShadingNormal.x;
		LightCacheEntries[lightCacheEntryIndex].Normal1 = packedShadingNormal.y;
		LightCacheEntries[lightCacheEntryIndex].Texcoord = hitTexcoord;
		LightCacheEntries[lightCacheEntryIndex].IncidentDirectionPacked = PackNormal( incidentDirection );
		LightCacheEntries[lightCacheEntryIndex].PathLength = pathLength;
	}
}
#endif

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint randomSeed = InitRandomSeed(FrameSeed, gl_GlobalInvocationID.x);
	int lightSampleIndex = int(gl_GlobalInvocationID.x / NumRaysPerLightSample);
	vec4 lightSamplePos_Norm0 = texelFetch(InitialLightSampleBuffer, lightSampleIndex * 2);
	vec4 lightIntensity_Norm1 = texelFetch(InitialLightSampleBuffer, lightSampleIndex * 2 + 1);

#if defined(SAVE_LIGHT_CACHE) && !defined(SAVE_LIGHT_CACHE_WARMUP)
	// Each thread writes its own initial light sample into the LightCache
	saveLightCache(gl_GlobalInvocationID.x,
		lightIntensity_Norm1.xyz / PI_2 / NumRaysPerLightSample, // Equal distributed flux in all directions, NumRaysPerLightSample times
		-1, lightSamplePos_Norm0.xyz, vec2(lightSamplePos_Norm0.w, lightIntensity_Norm1.w),
		vec2(0.0), vec3(0.0), 0);
#ifdef CHAINED_MIS
	float lastConnectionProbability = 0.0; // Point light init (cannot be traced by a PT)
	float lastCosAbs = 1.0;
	float chainedMISWeightN = 1.0;
	float chainedMISWeightT = 1.0;
	LightCacheEntries[gl_GlobalInvocationID.x].ChainedMISWeightN = chainedMISWeightN;
	LightCacheEntries[gl_GlobalInvocationID.x].ChainedMISWeightT = chainedMISWeightT;
#endif
#endif


	// Keep in mind that we are tracing flux = photons!
	// TotalFlux = Integral(I0 * cos Angle) dangle = I0 * PI
	vec3 pathThroughput = lightIntensity_Norm1.xyz * (PI / NumRaysPerLightSample);

	Ray ray;
	ray.Origin = lightSamplePos_Norm0.xyz;
	// Omnidirectional light?
	if(lightIntensity_Norm1.w > 1.5)
	{
		ray.Direction = SampleDirection(Random2(randomSeed));
		pathThroughput *= 4.0; // The above integration is for Lambertian emitters, need to correct this
	} else {
		vec3 normal = UnpackNormal(vec2(lightSamplePos_Norm0.w, lightIntensity_Norm1.w));
		vec3 U, V;
		CreateONB(normal, U, V);
		ray.Direction = SampleHemisphereCosine(Random2(randomSeed), U, V, normal);
	#if defined(CHAINED_MIS) && defined(SAVE_LIGHT_CACHE) && !defined(SAVE_LIGHT_CACHE_WARMUP)
		lastCosAbs = saturate(dot(normal, ray.Direction));
		lastConnectionProbability = MISHeuristic(lastCosAbs / PI);
	#endif
	}

	for(int i=0; i<MAX_PATHLENGTH; ++i)
	{
		// Trace ray.
		Triangle triangle;
		vec3 barycentricCoord;
		float rayHit = RAY_MAX;
		vec3 geometryNormal;
		TraceRay(ray, rayHit, barycentricCoord, triangle, geometryNormal);
		if(rayHit == RAY_MAX)
			break;
		//geometryNormal = normalize(geometryNormal); geometryNormal is not normalize, but it actually does not need to be! See AdjointBSDFShadingNormalX functions
		ray.Origin = ray.Origin + rayHit * ray.Direction;	// Go to surface with recursive ray (no epsilon yet!)

		// Compute hit normal and texture coordinate.
		vec3 shadingNormal; vec2 hitTexcoord;
		GetTriangleHitInfo(triangle, barycentricCoord, shadingNormal, hitTexcoord);

		// Get Material infos.
		MaterialData materialData = SampleMaterialData(triangle.w, hitTexcoord);

		// Save light cache entry.
#ifdef SAVE_LIGHT_CACHE
		uint lightCacheEntryIndex = atomicAdd(NumLightCacheEntries, 1);
	#ifdef SAVE_LIGHT_CACHE_WARMUP
		atomicAdd(LightPathLengthSum, 1);
	#else
		saveLightCache(lightCacheEntryIndex, pathThroughput, triangle.w,
			ray.Origin, PackNormal(shadingNormal), hitTexcoord, ray.Direction, i+1);
		// Important: The cache misses the chained MIS information, because it is not
		// available until next Monte Carlo decision.
	#endif
#endif

		// Path length debugging.
	#ifdef SHOW_SPECIFIC_PATHLENGTH
		if(i+1 == SHOW_SPECIFIC_PATHLENGTH)
		{
	#endif

		// Try to connect to camera.
	#ifndef SAVE_LIGHT_CACHE_WARMUP
		#ifdef SAVE_LIGHT_CACHE
			#ifdef CHAINED_MIS
				float lastDistMIS = DistanceMISHeuristic(rayHit, lastCosAbs);
				ProjectToScreen(ray, geometryNormal, shadingNormal, materialData, pathThroughput, true,
					chainedMISWeightN, chainedMISWeightT, lastConnectionProbability, lastDistMIS, true);
			#else
				ProjectToScreen(ray, geometryNormal, shadingNormal, materialData, pathThroughput, true, true);
			#endif
		#else
			ProjectToScreen(ray, geometryNormal, shadingNormal, materialData, pathThroughput, true, false);
		#endif
	#endif

	#ifdef SHOW_SPECIFIC_PATHLENGTH
		}
	#endif

		// Continue ray.
		vec3 throughput = vec3(1.0);
		float samplePDF;
		bool isReflectedDiffuse;
		vec3 newDirection = SampleAdjointBSDF(ray.Direction, materialData, randomSeed, shadingNormal, throughput, isReflectedDiffuse, samplePDF);
		throughput *= AdjointBSDFShadingNormalCorrection(ray.Direction, newDirection, geometryNormal, shadingNormal);
		pathThroughput *= throughput;
		
	#if defined(CHAINED_MIS) && defined(SAVE_LIGHT_CACHE) && !defined(SAVE_LIGHT_CACHE_WARMUP)
		// Compute how likely a PT could have generated the last path segment.
		float reverseConnectionProbability = MISHeuristic(samplePDF);
		float distMIS = DistanceMISHeuristic(rayHit, lastCosAbs);
		float mis = lastConnectionProbability / max(lastConnectionProbability + distMIS * reverseConnectionProbability, DIVISOR_EPSILON);
		// For the chained weight different options exist.
		// If chainedMISWeightN == chainedMISWeightT the standard MIS is used.
		updateQuality(chainedMISWeightN, mis);
		updateQuality(chainedMISWeightT, 1.0 - mis);
		LightCacheEntries[lightCacheEntryIndex].ChainedMISWeightN = chainedMISWeightN;
		LightCacheEntries[lightCacheEntryIndex].ChainedMISWeightT = chainedMISWeightT;

		lastConnectionProbability = reverseConnectionProbability;
		lastCosAbs = abs(dot(ray.Direction, geometryNormal));
	#endif

	#ifdef RUSSIAN_ROULETTE
		float continuationPropability = saturate(GetLuminance(throughput));
		if(Random(randomSeed) >= continuationPropability) // if terminationPropability is zero, path should be stopped -> >=
			break;
		pathThroughput /= continuationPropability; // Only change in spectrum, no energy loss. Photon (!) stays the same.
	#endif

		ray.Direction = newDirection;
		ray.Origin += ray.Direction * RAY_HIT_EPSILON;
	}
}
