#version 440

layout(binding = 0, rgba32f) restrict writeonly uniform image2D OutputTexture; // attention! No coherent flag set!

layout(binding = 0, std140) uniform TestUBO
{
	vec3 CameraU;
	vec3 CameraV;
	vec3 CameraW;
	vec3 CameraPosition;
	float Time;
};

#include "testraytrace.glsl"

#define LOCAL_SIZE 32
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;
void main()
{
	ivec2 gridPosition = ivec2(gl_GlobalInvocationID.xy);
	vec2 screenCoord = vec2(gl_GlobalInvocationID.xy) / (gl_NumWorkGroups.xy * gl_WorkGroupSize.xy) * 2.0 - 1.0;

	Ray cameraRay;
	cameraRay.origin = CameraPosition;
	cameraRay.direction = normalize(screenCoord.x*CameraU + screenCoord.y*CameraV + CameraW);

	DefineScene();
	Intersection intersect;
	intersect.t = 1.0e+30;
	intersect.sphere = sphere[4];
	TraceRay(cameraRay, intersect);

	const vec3 lightDir = normalize(vec3(1.0, 1.0, 0.0));
	vec3 hitPos = cameraRay.origin + intersect.t * cameraRay.direction;
	vec4 color = vec4(intersect.sphere.col * dot(lightDir, normalize(hitPos - intersect.sphere.pos)), 1.0);

	imageStore(OutputTexture, gridPosition, color);
}